{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/andy/Downloads/exam3/campaign_contract/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport react, { Component } from 'react';\nimport factory from '../ethereum/factory';\nimport web3 from '../ethereum/web3';\nimport Web3 from 'web3'; // export default()=> {\n//   return <h1>next index页面</h1>;\n// }\n\nvar CampaignIndex = /*#__PURE__*/function (_Component) {\n  _inherits(CampaignIndex, _Component);\n\n  var _super = _createSuper(CampaignIndex);\n\n  function CampaignIndex() {\n    var _this;\n\n    _classCallCheck(this, CampaignIndex);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      account: ''\n    });\n\n    return _this;\n  }\n\n  _createClass(CampaignIndex, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var web3Provider, accounts;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context.next = 13;\n                  break;\n                }\n\n                web3Provider = window.ethereum;\n                _context.prev = 2;\n                _context.next = 5;\n                return window.ethereum.enable();\n\n              case 5:\n                console.log('account access success.');\n                _context.next = 11;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](2);\n                // 用户不授权时\n                console.error(\"User denied account access\");\n\n              case 11:\n                _context.next = 14;\n                break;\n\n              case 13:\n                // Legacy dapp browsers...\n                if (window.web3) {\n                  // 老版本 metamask 账户信息是公开的，2018-11之后，需要授权才能获取账户信息\n                  web3Provider = window.web3.currentProvider;\n                  console.log('!!!!!!!!!!!!!!!!!');\n                } // Non-dapp browsers...\n                else {\n                    console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n                  }\n\n              case 14:\n                console.log('+++++++++++++++++');\n                web3 = new Web3(web3Provider); // 请求账户授权，授权完成之后才可以通过  web3.eth.getAccounts() 获取到账户信息\n\n                _context.next = 18;\n                return web3.eth.getAccounts();\n\n              case 18:\n                accounts = _context.sent;\n                console.log(accounts);\n                this.setState({\n                  account: accounts[0]\n                });\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 8]]);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n    /*  当浏览器禁止 javascript 之后，console.log() 不会被执行\n      async componentDidMount() {\n    \n        // 请求 账户授权\n        window.addEventListener('load', async () => {\n          var web3Provider;\n           // Modern dapp browsers...\n           if (window.ethereum) {\n               web3Provider = window.ethereum;\n               try {\n                   // 请求 账户授权\n                   await window.ethereum.enable();\n                   console.log('account access success.');\n               } catch (error) {\n                   // 用户不授权时\n                   console.error(\"User denied account access\")\n               }\n           }\n           // Legacy dapp browsers...\n           else if (window.web3) {   // 老版本 metamask 账户信息是公开的，2018-11之后，需要授权才能获取账户信息\n               web3Provider = window.web3.currentProvider;\n               console.log('!!!!!!!!!!!!!!!!!');\n           }\n           // Non-dapp browsers...\n           else {\n               console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n           }\n           console.log('+++++++++++++++++');\n           web3 = new Web3(web3Provider);\n        });\n    \n        const address = await factory.options.address;\n        console.log(address);\n    \n        // 请求账户授权，授权完成之后才可以通过  web3.eth.getAccounts() 获取到账户信息\n        const accounts = await web3.eth.getAccounts();\n        console.log(accounts);\n    \n        const campaign = await factory.methods.getDeployedCampaign().call();\n        console.log(campaign);\n      }\n    */\n    // {this.props.campaign[0]}\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 7\n        }\n      }, __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 9\n        }\n      }, \"hello index: campaign address : \", this.props.campaign[0]), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 9\n        }\n      }, \"account address : \", this.state.account));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    // next 框架中预处理函数(在服务器端预处理，将结果返回到前端界面)\n    // 无法使用 window 对象\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var address, campaign;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return factory.options.address;\n\n              case 2:\n                address = _context2.sent;\n                console.log(address);\n                _context2.next = 6;\n                return factory.methods.getDeployedCampaign().call();\n\n              case 6:\n                campaign = _context2.sent;\n                console.log(campaign);\n                return _context2.abrupt(\"return\", {\n                  campaign: campaign\n                });\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getInitialProps() {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return CampaignIndex;\n}(Component); // 导出\n\n\nexport default CampaignIndex;","map":{"version":3,"sources":["/Users/andy/Downloads/exam3/campaign_contract/pages/index.js"],"names":["react","Component","factory","web3","Web3","CampaignIndex","account","window","ethereum","web3Provider","enable","console","log","error","currentProvider","eth","getAccounts","accounts","setState","props","campaign","state","options","address","methods","getDeployedCampaign","call"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AAEA,OAAOC,IAAP,MAAiB,MAAjB,C,CACA;AACA;AACA;;IAEMC,a;;;;;;;;;;;;;;;;4DAEI;AACNC,MAAAA,OAAO,EAAC;AADF,K;;;;;;;;;;;;;;qBAoBFC,MAAM,CAACC,Q;;;;;AACPC,gBAAAA,YAAY,GAAGF,MAAM,CAACC,QAAtB;;;uBAGUD,MAAM,CAACC,QAAP,CAAgBE,MAAhB,E;;;AACNC,gBAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;;;;;;;AAEA;AACAD,gBAAAA,OAAO,CAACE,KAAR,CAAc,4BAAd;;;;;;;AAGR;AACK,oBAAIN,MAAM,CAACJ,IAAX,EAAiB;AAAI;AACtBM,kBAAAA,YAAY,GAAGF,MAAM,CAACJ,IAAP,CAAYW,eAA3B;AACAH,kBAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACH,iBAHI,CAIL;AAJK,qBAKA;AACDD,oBAAAA,OAAO,CAACC,GAAR,CAAY,qEAAZ;AACH;;;AACDD,gBAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAT,gBAAAA,IAAI,GAAG,IAAIC,IAAJ,CAASK,YAAT,CAAP,C,CAEA;;;uBACuBN,IAAI,CAACY,GAAL,CAASC,WAAT,E;;;AAAjBC,gBAAAA,Q;AACNN,gBAAAA,OAAO,CAACC,GAAR,CAAYK,QAAZ;AAEA,qBAAKC,QAAL,CAAc;AAACZ,kBAAAA,OAAO,EAACW,QAAQ,CAAC,CAAD;AAAjB,iBAAd;;;;;;;;;;;;;;;;AAIJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CE;;;;6BACS;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAAoC,KAAKE,KAAL,CAAWC,QAAX,CAAoB,CAApB,CAApC,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAsB,KAAKC,KAAL,CAAWf,OAAjC,CAFF,CADF;AAMD;;;AAlGD;AACA;;;;;;;;;uBAGwBJ,OAAO,CAACoB,OAAR,CAAgBC,O;;;AAAhCA,gBAAAA,O;AACNZ,gBAAAA,OAAO,CAACC,GAAR,CAAYW,OAAZ;;uBAEuBrB,OAAO,CAACsB,OAAR,CAAgBC,mBAAhB,GAAsCC,IAAtC,E;;;AAAjBN,gBAAAA,Q;AACNT,gBAAAA,OAAO,CAACC,GAAR,CAAYQ,QAAZ;kDAEO;AAACA,kBAAAA,QAAQ,EAARA;AAAD,iB;;;;;;;;;;;;;;;;;;;EAhBiBnB,S,GA0G5B;;;AACA,eAAeI,aAAf","sourcesContent":["import react,{Component} from 'react';\nimport factory from '../ethereum/factory';\nimport web3 from '../ethereum/web3';\n\nimport Web3 from 'web3';\n// export default()=> {\n//   return <h1>next index页面</h1>;\n// }\n\nclass CampaignIndex extends Component {\n\n  state = {\n    account:'',\n  }\n\n  // next 框架中预处理函数(在服务器端预处理，将结果返回到前端界面)\n  // 无法使用 window 对象\n  static async getInitialProps() {\n\n    const address = await factory.options.address;\n    console.log(address);\n\n    const campaign = await factory.methods.getDeployedCampaign().call();\n    console.log(campaign);\n\n    return {campaign};   // {} 一定要有\n  }\n\n  async componentDidMount() {\n\n    var web3Provider;\n    if (window.ethereum) {\n        web3Provider = window.ethereum;\n        try {\n            // 请求 账户授权\n            await window.ethereum.enable();\n            console.log('account access success.');\n        } catch (error) {\n            // 用户不授权时\n            console.error(\"User denied account access\")\n        }\n    }\n    // Legacy dapp browsers...\n    else if (window.web3) {   // 老版本 metamask 账户信息是公开的，2018-11之后，需要授权才能获取账户信息\n        web3Provider = window.web3.currentProvider;\n        console.log('!!!!!!!!!!!!!!!!!');\n    }\n    // Non-dapp browsers...\n    else {\n        console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    }\n    console.log('+++++++++++++++++');\n    web3 = new Web3(web3Provider);\n\n    // 请求账户授权，授权完成之后才可以通过  web3.eth.getAccounts() 获取到账户信息\n    const accounts = await web3.eth.getAccounts();\n    console.log(accounts);\n\n    this.setState({account:accounts[0]});\n  }\n\n\n/*  当浏览器禁止 javascript 之后，console.log() 不会被执行\n  async componentDidMount() {\n\n    // 请求 账户授权\n    window.addEventListener('load', async () => {\n      var web3Provider;\n       // Modern dapp browsers...\n       if (window.ethereum) {\n           web3Provider = window.ethereum;\n           try {\n               // 请求 账户授权\n               await window.ethereum.enable();\n               console.log('account access success.');\n           } catch (error) {\n               // 用户不授权时\n               console.error(\"User denied account access\")\n           }\n       }\n       // Legacy dapp browsers...\n       else if (window.web3) {   // 老版本 metamask 账户信息是公开的，2018-11之后，需要授权才能获取账户信息\n           web3Provider = window.web3.currentProvider;\n           console.log('!!!!!!!!!!!!!!!!!');\n       }\n       // Non-dapp browsers...\n       else {\n           console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n       }\n       console.log('+++++++++++++++++');\n       web3 = new Web3(web3Provider);\n    });\n\n    const address = await factory.options.address;\n    console.log(address);\n\n    // 请求账户授权，授权完成之后才可以通过  web3.eth.getAccounts() 获取到账户信息\n    const accounts = await web3.eth.getAccounts();\n    console.log(accounts);\n\n    const campaign = await factory.methods.getDeployedCampaign().call();\n    console.log(campaign);\n  }\n*/\n\n  // {this.props.campaign[0]}\n  render() {\n    return (\n      <div>\n        <p>hello index: campaign address : {this.props.campaign[0]}</p>\n        <p>account address : {this.state.account}</p>\n      </div>\n    );\n  }\n}\n// 导出\nexport default CampaignIndex;\n"]},"metadata":{},"sourceType":"module"}